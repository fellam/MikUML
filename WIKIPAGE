{{TNT|Extension|templatemode =
|name          = MikUML
|status        = experimental
|type1         = parser function
|type2         =
|hook1         = ParserFirstCallInit
|hook2         = ArticleSave
|username      = Michele.Fella
|author        = Michele Fella <michele.fella@gmail.com>
|description   = Process and returns the plant uml object '''AFTER''' processiong the raw wikitext.
|image         =
|imagesize     =
|version       = 0.1
|update        = 2016-05-10
|mediawiki     = 1.26+
|license       = Apache License
|download      = {{TNT|GithubDownload|fellam|MikUML}}
|needs-updatephp = No
|changelog     = 
|parameters    =
|tags          = &lt;MikUML>
|rights        =
|example       =
|compatibility =
|bugzilla      = 
}}

The '''MikUML''' depends on [[Extension:PlantUML|PlantUML]] extension and was previously available with [[Extension:MikFunctions|MikFunctions]].

If you are not familiar with UML and wiki extension you might want to check [http://www.plantuml.com/ plantuml] and [[Extension:PlantUML|PlantUML]] pages.

The purpose of the function was to override the PlantUML extension tag ''<uml>'', and process the raw wikitext before submitting it to PlantUML for processing.

{{Note}} This extension currently works only on *NIX servers

== Install ==
{{TNT|ExtensionInstall
|download-link=[https://github.com/fellam/MikUML/archive/master.zip Download]
}}

== Usage ==

=== #uml: ===

With Plant UML you write:

<code><nowiki><uml></nowiki>plantumlcode<nowiki></uml></nowiki></code> 

;Example
<code><nowiki><uml></nowiki>actor Mik #99FF99<nowiki></uml></nowiki></code> will return the uml object after being processed by the PlantUML extension.

But this wont work if you use the uml tag in a template and you want to build your uml code with triple braces vaiables, insthead, in your template you can use the <code><nowiki><mikuml></nowiki>actor Mik #99FF99<nowiki><mikuml></nowiki></code> to obtain the same result. 

Note: some parser function such as #replace seems not properly being parsed, a workaround so far is to store your uml code into variable and include those variable into the mikuml tag.

;Example
<code>
<nowiki>{{#</nowiki>vardefine:participant|actor Mik #99FF99<nowiki>}}</nowiki>

<nowiki><mikuml>{{#</nowiki>var:participant|<nowiki>}}<mikuml></nowiki>
</code> 


{{Note}} PlantUML [http://plantuml.com/link links] examples:

<pre> actor Bob [[http://plantuml.com/sequence]] should be added within <mikuml> tag as actor Bob http://plantuml.com/sequence</pre>

<pre> actor "This is [[http://plantuml.com/sequence Alice<nowiki>]]" should be added within <mikuml> tag as actor "This is [http://plantuml.com/sequence Alice]"</pre>

<pre> Alice -> Bob : hello with [[http://plantuml.com/start{Tooltip for message} some link]] should be added within <mikuml> tag as Alice -> Bob : hello with [http://plantuml.com/start{Tooltip for message} some link]</pre>

==See also==
* [[Extension:MikFunctions]]
* [[Extension:PlantUML|PlantUML]]
* [[Extension:Variables|Variables]]
